# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

## The component representation of a spin behavior (on click)
## 
## @name spin-on-click.vwf
## @namespace

--- 
extends:
  http://vwf.example.com/node3.vwf
properties:
  driving:
    set: |
      if ( value && !this.driving ) {
         this.future( 0.05 ).updateVehicle();
      }
      this.driving = value;
    value: false
  allowReverse: false
  maxSpeed: 2200
  maxReverseSpeed: -1500
  maxWheelRotation: 0.6
  forwardAcceleration: 1250
  backwardAcceleration: 1500
  wheelAngularAcceleration: 1.5
  frontDecceleration: 750
  wheelAngularDecceleration: 1.0
  steeringRadiusRatio: 0.0023
methods:
  updateVehicle:
  handleKeyDown:
  onKeyDown:
  onKeyUp:
  quadraticEaseOut:
  cubicEaseOut:
  circularEaseOut:
  sinusoidalEaseOut:
  exponentialEaseOut:
scripts:
- |
  this.initialize = function() {
    this.speed = 0;
    this.acceleration = 0;
    this.wheelOrientation = 0;
    this.carOrientation = 0;
    this.lastTime = undefined;

    this.movement = {
      forward: false,
      backward: false,
      left: false,
      rigth: false,
    }
    this.input = { 
      keysAreDown: function() { return ( this.keyInfo && this.keyInfo.keysDown && Object.keys( this.keyInfo.keysDown ).length > 0 ); },
      keyInfo: undefined,
    };

  }
  this.updateVehicle = function () {

    this.handleKeyDown();
    var now = this.time;
    if ( this.input.keysAreDown() && this.lastTime !== undefined ) {
      var hv = this.find( "/humvee" )[ 0 ]; 
      var delta = now - this.lastTime;
      
      var clamp = function( x, a, b ) { return ( x < a ) ? a : ( ( x > b ) ? b : x );  };
      var exponentialEaseOut = function( k ) { return k === 1 ? 1 : - Math.pow( 2, - 10 * k ) + 1; };

      // speed and wheels based on controls
      if ( this.movement.forward ) {
        this.speed = clamp( this.speed + delta * this.forwardAcceleration, this.maxReverseSpeed, this.maxSpeed );
        this.acceleration = clamp( this.acceleration + delta, -1, 1 );
      }

      if ( this.movement.backward ) {
        this.speed = clamp( this.speed - delta * this.backwardAcceleration, this.maxReverseSpeed, this.maxSpeed );
        this.acceleration = clamp( this.acceleration - delta, -1, 1 );
      }

      if ( this.movement.left ) {
        this.wheelOrientation = clamp( this.wheelOrientation + delta * this.wheelAngularAcceleration, - this.maxWheelRotation, this.maxWheelRotation );
      }

      if ( this.movement.right ) {
        this.wheelOrientation = clamp( this.wheelOrientation - delta * this.wheelAngularAcceleration, - this.maxWheelRotation, this.maxWheelRotation );
      }

      // speed decay
      if ( ! ( this.movement.forward || this.movement.backward ) ) {
        if ( this.speed > 0 ) {
          var k = exponentialEaseOut( this.speed / this.maxSpeed );
          this.speed = clamp( this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed );
          this.acceleration = clamp( this.acceleration - k * delta, 0, 1 );
        } else {
          var k = exponentialEaseOut( this.speed / this.maxReverseSpeed );
          this.speed = clamp( this.speed + k * delta * this.backwardAcceleration, this.maxReverseSpeed, 0 );
          this.acceleration = clamp( this.acceleration + k * delta, -1, 0 );
        }
      }

      // steering decay
      if ( ! ( this.movement.left || this.movement.right ) ) {
        if ( this.wheelOrientation > 0 ) {
          this.wheelOrientation = clamp( this.wheelOrientation - delta * this.wheelAngularDecceleration, 0, this.maxWheelRotation );
        } else {
          this.wheelOrientation = clamp( this.wheelOrientation + delta * this.wheelAngularDecceleration, - this.maxWheelRotation, 0 );
        }
      }

      // car update
      var forwardDelta = this.speed * delta;
      this.carOrientation += ( forwardDelta * this.steeringRadiusRatio ) * this.wheelOrientation;

      console.info( "       forwardDelta = " + forwardDelta );
      console.info( "this.carOrientation = " + this.carOrientation ); 

      // displacement
      var pos = hv.translation;
      pos[0] += Math.sin( this.carOrientation ) * forwardDelta;
      pos[1] += Math.cos( this.carOrientation ) * forwardDelta;
      hv.translation = pos;

      // steering
      hv.rotation = [ 0, 0, this.carOrientation ];

      // wheels rolling
      var angularSpeedRatio = 1 / ( this.scale * ( this.wheelDiameter / 2 ) );
      var wheelDelta = forwardDelta * angularSpeedRatio;

      this.TirePassFront.rotateBy( [ 1, 0, 0, wheelDelta ] );
      this.TireDriverFront.rotateBy( [ 1, 0, 0, wheelDelta ] );
      this.TirePassRear.rotateBy( [ 1, 0, 0, wheelDelta ] );
      this.TireDriverRear.rotateBy( [ 1, 0, 0, wheelDelta ] );

      // front wheels steering
      this.TirePassFront.rotateBy( [ 0, 0, 1, this.wheelOrientation ] );
      this.TireDriverFront.rotateBy( [ 0, 0, 1, this.wheelOrientation ] );
    }
    this.lastTime = now;

    if ( this.driving ) {
      this.future( 0.05 ).updateVehicle();
    } else {
      this.lastTime = undefined;
    }

  }
  this.onKeyDown = function( parms ) {
    // capture the event input locally
    console.info( "drive behavior keyDown ===================" );
    this.input.keyInfo = parms;
  }
  this.onKeyUp = function( parms ) {
    this.input.keyInfo = parms;
    if ( !this.input.keysAreDown() ) {
      this.lastTime = undefined;
    }
  }
  this.handleKeyDown = function() {
    
    this.movement.forward = false;
    this.movement.backward = false;
    this.movement.left = false;
    this.movement.right = false;

    var kd = $.extend( true, {}, this.input.keyInfo.keysDown, this.input.keyInfo.keysUp );
    var temp;
    for ( var keyPress in kd ) {
      switch ( Number( kd[ keyPress ].code ) ) {
        case 87:  //w
        case 38:  //up
          this.movement.forward = true;
          break;
        case 83:  //s
        case 40:  //down
          this.movement.backward = true;
          break;
        case 37: // left              
        case 65:  //a
          this.movement.left = true;
          break;
        case 39: // right              
        case 68:  //d
          this.movement.right = true;
          break;
        default:
          break;
      }
    }
  }
  function quadraticEaseOut( k ) {
   return - k * ( k - 2 ); 
  }
  function cubicEaseOut( k ) { 
    return --k * k * k + 1; 
  }
  function circularEaseOut( k ) { 
    return Math.sqrt( 1 - --k * k ); 
  }
  function sinusoidalEaseOut( k ) { 
    return Math.sin( k * Math.PI / 2 ); 
  } //@ sourceURL=drive.vwf
